<?php
/**
 * core/Router.php
 * 
 * The Router namespace will route the information. This is dependent on the 
 * requested URI. It associates a name with a controller/method and includes 
 * the information accordingly.
 * 
 * @author Joshua Weeks (jokka85@gmail.com)
 * @version 0.1
 * @since 0.1
 */

namespace Router{
    
    use Controller\getController;
    
    /**
     * class Router
     * 
     * Class used to provide the Routing methods
     */
    class Router {
        
        /**
         * @var Array 
         * Routes, as provided by the config/router.php file 
         */
        private $routes;
        
        /**
         * @var Array 
         * Directories, as provided by config/required.php file 
         */
        private $dirs;
        
        /**
         * constructor that sets up directories, routes, and then engages the 
         * primary method in order to begin the routing process.
         */
        function __construct($routes){
            
            $this->cleanDirs();
            
            $this->routes = $routes;
            
            $this->route();
            
        }
        
        /**
         * When initiated the route method will attempt to locate the 
         * appropriate controller and/or method.
         */
        public function route(){
            
            /**
             * @var String
             * Page Name
             */
            $page = '';
            
            // NAME OF THE REQUESTED CONTROLLER
            // $name will be used to attempt to locate title within $this->routes
            $name = ($this->dirs[0] == '' || $this->dirs[0] == null) ? "/" : $this->dirs[0];
                 
            // if the name exists within the routes, send to appropriate location
            if(array_key_exists($name, $this->routes)){
                                
                $page = $this->routes[$name];
                
            } else {
                
                // Doesn't show a route but may exist within the Controller folder
                if($this->checkController($this->dirs[0])){
                                        
                    $page = $this->dirs[0];
                    
                } else {
                
                    // send to error page
                    $page = $this->routes['Error'];
                    
                }
                
            }
            
            // remove the controller name from the list of directory structure
            unset($this->dirs[0]);
            $this->dirs = array_merge($this->dirs);
            
            // instantiate the getController() class in order to being loading 
            // a controller
            $controller = new getController();
            $controller->controller($page, (count($this->dirs) >= 1) ? $this->dirs : null);
            
            // verify vars
            if($controller->checkVars()){
                // send to error page
                $controller->controller($this->routes['Error']);
            }
                        
        }
        
        /**
         * cleanDirs() - Simply "cleans" the directory structure by removing the 
         * base directory and then creating an array of directories
         */
        private function cleanDirs(){
            
            // GET THE REQUESTED URI
            $requestURI = htmlspecialchars($_SERVER['REQUEST_URI']);
            
            $DIR_LIST = explode("/", $requestURI);
            
            // IF WE AREN'T IN THE PARENT FOLDER THEN PROCEED TO THRU IF STATEMENT
            if(BASE_DIR != false || BASE_DIR != DIRECTORY_SEPARATOR){
            
                // LOOP THROUGH DIRECTORY TO SORT THE STRUCTURE ACCORDINGLY
                foreach($DIR_LIST as $key => $v){
                    
                    $value = $v;
                    // remove key
                    unset($DIR_LIST[$key]);
                    
                    if($value == BASE_DIR){
                        // remove everything before
                        break;
                    }
                }
                
            }
            
            // reset keys and set to variable     
            $this->dirs = array_merge($DIR_LIST);            
        }
        
        /**
         * checkController($controller)
         * 
         * Will check the Controller folder for a file that matches the name 
         * given in the request_uri.
         * 
         * @param String $controller - Name of controller to locate
         * @return Boolean - If controller exists then this will return TRUE, 
         * otherwise it will return FALSE
         */
        private function checkController($controller){
            return file_exists(CONTROLLER_DIRECTORY . $controller . "Controller.php");
        }
        
    }
    
}
